/**
 * @param {character[][]} grid
 * @return {number}
 */

//自写算法
var numIslands = function (grid) {
    let teamCode = [0]; //teamCode[0]表示最大组号，teamCode[1]表示当前组号
    let teamArray = new Array(grid.length);
    for (let i = 0; i < grid.length; i++) {
        teamArray[i] = new Array(grid[0].length).fill(0);
    };
    checkTeamCode(teamCode, grid, teamArray);
    return teamCode[0];
};

function checkTeamCode(teamCode, A, teamArray) {
    for (let i = 0; i < A.length; i++) {
        for (let j = 0; j < A[i].length; j++) {
            let stack = [];
            if (A[i][j] == 1 && teamArray[i][j] == 0) {
                stack.push([i, j]);
                teamCode[0]++;
            }
            while (stack.length != 0) {
                let [i, j] = stack.shift();
                teamArray[i][j] = teamCode[0];
                if (i + 1 < A.length && A[i + 1][j] == 1 && teamArray[i + 1][j] == 0) {
                    teamArray[i + 1][j] = teamCode[0];
                    stack.push([i + 1, j]);
                }
                if (i - 1 >= 0 && A[i - 1][j] == 1 && teamArray[i - 1][j] == 0) {
                    teamArray[i - 1][j] = teamCode[0];
                    stack.push([i - 1, j]);
                }
                if (j + 1 < A[i].length && A[i][j + 1] == 1 && teamArray[i][j + 1] == 0) {
                    teamArray[i][j + 1] = teamCode[0];
                    stack.push([i, j + 1]);
                }
                if (j - 1 >= 0 && A[i][j - 1] == 1 && teamArray[i][j - 1] == 0) {
                    teamArray[i][j - 1] = teamCode[0];
                    stack.push([i, j - 1]);
                }
            }
        }
    }
}



//优化算法
var numIslands = function (grid) {
    if (grid.length == 0 || grid[0].length == 0) return 0;
    let res = 0;
    let visited = [];
    for (let i = 0; i < grid.length; i++) {
        visited.push(new Array(grid[0].length).fill(0));
    }
    for (let i = 0; i < grid.length; i++) {
        for (let j = 0; j < grid[0].length; j++) {
            if (grid[i][j] == 1 && visited[i][j] == 0) {
                helper(grid, visited, i, j);
                res++;
            }
        }
    }
    return res;
};

function helper(grid, visited, i, j) {
    if (i >= 0 && i < grid.length && j >= 0 && j < grid[0].length && grid[i][j] == 1 && visited[i][j] == 0) {
        visited[i][j] = 1;
        helper(grid, visited, i - 1, j);
        helper(grid, visited, i + 1, j);
        helper(grid, visited, i, j - 1);
        helper(grid, visited, i, j + 1);
    }
}


console.log(numIslands([
    ["1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1"],
    ["0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "0"],
    ["1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
    ["1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
    ["1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
    ["1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1"],
    ["0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1"],
    ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1"],
    ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
    ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
    ["0", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
    ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
    ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
    ["1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1"],
    ["1", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1", "1"],
    ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0"],
    ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "0"],
    ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
    ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
    ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"]
]));